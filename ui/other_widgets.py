from PySide6.QtWidgets import QTabBar,  QLabel, QFrame,  QTextEdit, QPushButton, QRadioButton, QButtonGroup, QHBoxLayout
from PySide6.QtWidgets import (
    QToolButton,
    QHBoxLayout,
    QMenu,
    QPushButton,
    QSizePolicy,
    QSpacerItem,
    QLabel,
    QLineEdit
)
from PySide6.QtCore import Signal, Slot, Qt
from PySide6.QtGui import QIcon, QAction
from PySide6.QtCore import Qt
from PySide6.QtGui import QAction
from PySide6 import QtCore, QtGui, QtWidgets
# from control.settings_control import SettingControl
# import time, os, sys
from html import escape
from utils import resource_path

# —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∏–¥–∂–µ—Ç—ã

class LoginInput(QLineEdit):
    def __init__(self, parent=None, placeholderText=None):
        super().__init__(parent, placeholderText=placeholderText)
        self.used_names = None
        self.textChanged.connect(self.check_login)
        self.is_correct = False
        self.warning = self.tr("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        self.used_names = []

    def set_used_names(self, names):
        self.used_names = names

    def check_login(self, login):
        import string
        k = [(c in string.ascii_letters.__str__()) for c in login]
        if not login:
            self.warning = self.tr("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        elif len(login) < 3:
            self.warning = self.tr("–õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        elif not all((c in string.ascii_letters + string.digits + '_') for c in login):
            self.warning = self.tr("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ _")
        elif login in self.used_names:
            self.warning = self.tr("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            self.warning = None
        self.is_correct = self.warning is None

    def event(self, event):
        from PySide6.QtCore import QEvent

        if event.type() == QEvent.Type.LanguageChange:
            self.retranslate()
        return super().event(event)

    def retranslate(self):
        self.check_login(self.text())


class PasswordInput(QLineEdit):
    def __init__(self, parent=None, placeholderText=None):
        super().__init__(parent, placeholderText=placeholderText)
        self.echo_mode_btn = QAction()
        self.addAction(self.echo_mode_btn, QLineEdit.ActionPosition.TrailingPosition)
        # self.setValidator(QRegularExpressionValidator(QRegularExpression("[a-zA-Z]+")))
        self.echo_mode_btn.triggered.connect(self.switch_echo_mode)
        self.echo_icon_path = "data/weye.svg"
        self.echo_icon_slash_path = "data/weye-slash.svg"
        self.switch_echo_mode()
        self.textChanged.connect(self.check_password)
        self.is_correct = False
        self.warning = self.tr("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    # def switch_correct_icon(self):
    #     if self.is_correct is True:
    #         self.correct_icon.setIcon(QIcon(resource_path("data/checkmark.svg")))
    #     else:
    #         self.correct_icon.setIcon(QIcon(resource_path("data/cross.svg")))

    def switch_echo_mode(self):
        if self.echoMode() == QLineEdit.EchoMode.Password:
            self.setEchoMode(QLineEdit.EchoMode.Normal)
            self.echo_mode_btn.setIcon(QIcon(f':/{self.echo_icon_slash_path}'))
        else:
            self.setEchoMode(QLineEdit.EchoMode.Password)
            self.echo_mode_btn.setIcon(QIcon(f":/{self.echo_icon_path}"))

    def switch_icon_theme(self, theme):
        if theme == 'defaultDark':
            self.echo_icon_path = 'data/weye.svg'
            self.echo_icon_slash_path = "data/weye-slash.svg"
        else:
            self.echo_icon_path = "data/beye.svg"
            self.echo_icon_slash_path = "data/beye-slash.svg"

        if self.echoMode() == QLineEdit.EchoMode.Password:
            self.echo_mode_btn.setIcon(QIcon(f":/{self.echo_icon_path}"))
        else:
            self.echo_mode_btn.setIcon(QIcon(f":/{self.echo_icon_slash_path}"))

    def check_password(self, password):
        import string
        if len(password) < 8:
            self.warning = self.tr("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        elif not all((c in string.ascii_letters + string.digits) for c in password):
            self.warning = self.tr("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ —Ü–∏—Ñ—Ä—ã")
        elif not any(c.isdigit() for c in password):
            self.warning = self.tr("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É")
        elif not any((c in string.ascii_letters) for c in password):
            self.warning = self.tr("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É")
        else:
            self.warning = None
        self.is_correct = self.warning is None
        # self.switch_correct_icon()

    def event(self, event):
        from PySide6.QtCore import QEvent

        if event.type() == QEvent.Type.LanguageChange:
            self.retranslate()
        return super().event(event)

    def retranslate(self):
        self.check_password(self.text())


class TabBarWithControl(QFrame):
    CloseClicked = Signal()
    MinimiseClicked = Signal()
    TabChanged = Signal(int)

    def __init__(self, parent=None):
        super().__init__(parent)

        self.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        # self.setStyleSheet('border-bottom: 1px solid #2b2e4a;background: #3a11cd;')
        self.setObjectName("TabPanel")
        layout = QHBoxLayout(self)
        layout.setAlignment(Qt.AlignmentFlag.AlignVCenter)
        layout.setSpacing(0)
        layout.setContentsMargins(0, 0, 0, 0)

        self.tabBar = QTabBar()
        self.tabBar.setDrawBase(False)
        # self.tabBar.setStyleSheet('background: red;')
        layout.addWidget(self.tabBar, alignment=Qt.AlignmentFlag.AlignBottom)

        spacer = QSpacerItem(
            20, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding
        )
        layout.addItem(spacer)

        self.right_widget = QFrame(self)
        self.right_widget.setObjectName("Corner")
        self.right_widget.setLayout(QHBoxLayout(self.right_widget))
        self.right_widget.layout().setContentsMargins(0, 0, 0, 0)
        self.right_widget.layout().setSpacing(0)
        self.theme_button = ThemeButton()
        self.minimise_btn = QPushButton("‚Äî", self)
        self.minimise_btn.setObjectName("minimiseButton")
        self.minimise_btn.clicked.connect(self.MinimiseClicked.emit)
        self.close_btn = QPushButton("‚úï", self)
        self.close_btn.setObjectName("exitButton")
        self.close_btn.clicked.connect(self.CloseClicked.emit)
        self.right_widget.layout().addWidget(self.theme_button)
        self.right_widget.layout().addWidget(self.minimise_btn)
        self.right_widget.layout().addWidget(self.close_btn)
        layout.addWidget(self.right_widget)


class ThemeButton(QToolButton):
    theme_changed = Signal(str)  # –°–∏–≥–Ω–∞–ª –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã

    def __init__(self):
        super().__init__()
        # self.setText("üé®")
        # self.setIcon(QIcon(resource_path("data/themes.svg")))  # –ò–∫–æ–Ω–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
        self.setPopupMode(QToolButton.ToolButtonPopupMode.InstantPopup)  # –ú–µ–Ω—é –ø–æ –∫–ª–∏–∫—É
        self._setup_menu()

    def _setup_menu(self):
        self._menu = QMenu(self)
        themes = ["defaultDark", "defaultLight"]
        for theme in themes:
            action = self._menu.addAction(theme)
            # action.triggered.connect(lambda: self.theme_changed.emit(theme))
        self._menu.triggered.connect(lambda action: self.theme_changed.emit(action.text()))
        self.setMenu(self._menu)


class KeyWidget(QPushButton):
    styles = ["background: #88C0D0; color: #090f1b; border: 2px solid #090f1b;",
             "background: #090f1b; border: 2px solid #88C0D0; color: #88C0D0;"]

    def __init__(self, text, parent=None, isdark=False):
        super().__init__(text, parent)
        self.setMinimumSize(60, 60)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏—à–∏
        self.setSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed,  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            QtWidgets.QSizePolicy.Policy.Fixed,  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        )
        # self.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.setProperty('pressed', True)
        self.setDisabled(True)
        # self.setDown(True)

    def set_active(self, active):
        self.setProperty("uncorrect", False)
        self.style().unpolish(self)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
        self.style().polish(self)
        self.update()
        self.setDown(active)

    # def theme_switch(self):
    #     self.styles = [self.styles[1], self.styles[0]]
    #     self.setStyleSheet(f"KeyWidget  {{ {self.styles[0]} }}")

    def set_uncorrect(self):
        self.setProperty("uncorrect", True)
        self.style().unpolish(self)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
        self.style().polish(self)
        self.update()
        # self.repaint()


class KeyboardWidget(QtWidgets.QFrame):
    keys_en = [
        [
            {"name": "key_`", "def": "`", "shift": "~"},
            {"name": "key_1", "def": "1", "shift": "!"},
            {"name": "key_2", "def": "2", "shift": "@"},
            {"name": "key_3", "def": "3", "shift": "#"},
            {"name": "key_4", "def": "4", "shift": "$"},
            {"name": "key_5", "def": "5", "shift": "%"},
            {"name": "key_6", "def": "6", "shift": "^"},
            {"name": "key_7", "def": "7", "shift": "&"},
            {"name": "key_8", "def": "8", "shift": "*"},
            {"name": "key_9", "def": "9", "shift": "("},
            {"name": "key_0", "def": "0", "shift": ")"},
            {"name": "key_-", "def": "-", "shift": "_"},
            {"name": "key_=", "def": "=", "shift": "+"},
            {"name": "key_BACKSPACE", "def": "BACK", "shift": "BACKSPACE"},
        ],
        [
            {"name": "key_TAB", "def": "TAB", "shift": "TAB"},
            {"name": "key_q", "def": "q", "shift": "Q"},
            {"name": "key_w", "def": "w", "shift": "W"},
            {"name": "key_e", "def": "e", "shift": "E"},
            {"name": "key_r", "def": "r", "shift": "R"},
            {"name": "key_t", "def": "t", "shift": "T"},
            {"name": "key_y", "def": "y", "shift": "Y"},
            {"name": "key_u", "def": "u", "shift": "U"},
            {"name": "key_i", "def": "i", "shift": "I"},
            {"name": "key_o", "def": "o", "shift": "O"},
            {"name": "key_p", "def": "p", "shift": "P"},
            {"name": "key_[", "def": "[", "shift": "{"},
            {"name": "key_]", "def": "]", "shift": "}"},
            {"name": "key_\\", "def": "\\", "shift": "|"},
        ],
        [
            {"name": "key_CAPS", "def": "CAPS", "shift": "CAPS"},
            {"name": "key_a", "def": "a", "shift": "A"},
            {"name": "key_s", "def": "s", "shift": "S"},
            {"name": "key_d", "def": "d", "shift": "D"},
            {"name": "key_f", "def": "f", "shift": "F"},
            {"name": "key_g", "def": "g", "shift": "G"},
            {"name": "key_h", "def": "h", "shift": "H"},
            {"name": "key_j", "def": "j", "shift": "J"},
            {"name": "key_k", "def": "k", "shift": "K"},
            {"name": "key_l", "def": "l", "shift": "L"},
            {"name": "key_;", "def": ";", "shift": ":"},
            {"name": "key_'", "def": "'", "shift": '"'},
            {"name": "key_ENTER", "def": "ENTER", "shift": "ENTER"},
        ],
        [
            {"name": "key_SHIFT1", "def": "SHIFT", "shift": "SHIFT"},
            {"name": "key_z", "def": "z", "shift": "Z"},
            {"name": "key_x", "def": "x", "shift": "X"},
            {"name": "key_c", "def": "c", "shift": "C"},
            {"name": "key_v", "def": "v", "shift": "V"},
            {"name": "key_b", "def": "b", "shift": "B"},
            {"name": "key_n", "def": "n", "shift": "N"},
            {"name": "key_m", "def": "m", "shift": "M"},
            {"name": "key_,", "def": ",", "shift": "<"},
            {"name": "key_.", "def": ".", "shift": ">"},
            {"name": "key_/", "def": "/", "shift": "?"},
            {"name": "key_SHIFT2", "def": "SHIFT", "shift": "SHIFT"},
        ],
        [
            {"name": "key_CTRL1", "def": "CTRL", "shift": "CTRL"},
            {"name": "key_ALT", "def": "ALT", "shift": "ALT"},
            {"name": "key_SPACE", "def": " ", "shift": " "},
            {"name": "key_ALT", "def": "ALT", "shift": "ALT"},
            {"name": "key_CTRL2", "def": "CTRL", "shift": "CTRL"},
        ],
    ]
    keys_ru = [
        [
            {"name": "key_—ë", "def": "—ë", "shift": "–Å"},
            {"name": "key_1", "def": "1", "shift": "1"},
            {"name": "key_2", "def": "2", "shift": "2"},
            {"name": "key_3", "def": "3", "shift": "3"},
            {"name": "key_4", "def": "4", "shift": "4"},
            {"name": "key_5", "def": "5", "shift": "5"},
            {"name": "key_6", "def": "6", "shift": "6"},
            {"name": "key_7", "def": "7", "shift": "7"},
            {"name": "key_8", "def": "8", "shift": "8"},
            {"name": "key_9", "def": "9", "shift": "9"},
            {"name": "key_0", "def": "0", "shift": "0"},
            {"name": "key_-", "def": "-", "shift": "-"},
            {"name": "key_+", "def": "+", "shift": "+"},
            {"name": "key_BACKSPACE", "def": "BACK", "shift": "BACKSPACE"},
        ],
        [
            {"name": "key_TAB", "def": "TAB", "shift": "TAB"},
            {"name": "key_–π", "def": "–π", "shift": "–ô"},
            {"name": "key_—Ü", "def": "—Ü", "shift": "–¶"},
            {"name": "key_—É", "def": "—É", "shift": "–£"},
            {"name": "key_–∫", "def": "–∫", "shift": "–ö"},
            {"name": "key_–µ", "def": "–µ", "shift": "–ï"},
            {"name": "key_–Ω", "def": "–Ω", "shift": "–ù"},
            {"name": "key_–≥", "def": "–≥", "shift": "–ì"},
            {"name": "key_—à", "def": "—à", "shift": "–®"},
            {"name": "key_—â", "def": "—â", "shift": "–©"},
            {"name": "key_–∑", "def": "–∑", "shift": "–ó"},
            {"name": "key_—Ö", "def": "—Ö", "shift": "–•"},
            {"name": "key_—ä", "def": "—ä", "shift": "–™"},
            {"name": "key_\\", "def": "\\", "shift": "\\"},
        ],
        [
            {"name": "key_CAPS", "def": "CAPS", "shift": "CAPS"},
            {"name": "key_—Ñ", "def": "—Ñ", "shift": "–§"},
            {"name": "key_—ã", "def": "—ã", "shift": "–´"},
            {"name": "key_–≤", "def": "–≤", "shift": "–í"},
            {"name": "key_–∞", "def": "–∞", "shift": "–ê"},
            {"name": "key_–ø", "def": "–ø", "shift": "–ü"},
            {"name": "key_—Ä", "def": "—Ä", "shift": "–†"},
            {"name": "key_–æ", "def": "–æ", "shift": "–û"},
            {"name": "key_–ª", "def": "–ª", "shift": "–õ"},
            {"name": "key_–¥", "def": "–¥", "shift": "–î"},
            {"name": "key_–∂", "def": "–∂", "shift": "–ñ"},
            {"name": "key_—ç", "def": "—ç", "shift": "–≠"},
            {"name": "key_ENTER", "def": "ENTER", "shift": "ENTER"},
        ],
        [
            {"name": "key_SHIFT1", "def": "SHIFT", "shift": "SHIFT"},
            {"name": "key_—è", "def": "—è", "shift": "–Ø"},
            {"name": "key_—á", "def": "—á", "shift": "–ß"},
            {"name": "key_—Å", "def": "—Å", "shift": "–°"},
            {"name": "key_–º", "def": "–º", "shift": "–ú"},
            {"name": "key_–∏", "def": "–∏", "shift": "–ò"},
            {"name": "key_—Ç", "def": "—Ç", "shift": "–¢"},
            {"name": "key_—å", "def": "—å", "shift": "–¨"},
            {"name": "key_–±", "def": "–±", "shift": "–ë"},
            {"name": "key_—é", "def": "—é", "shift": "–Æ"},
            {"name": "key_.", "def": ".", "shift": ","},
            {"name": "key_SHIFT2", "def": "SHIFT", "shift": "SHIFT"},
        ],
        [
            {"name": "key_CTRL1", "def": "CTRL", "shift": "CTRL"},
            {"name": "key_ALT1", "def": "ALT", "shift": "ALT"},
            {"name": "key_SPACE", "def": " ", "shift": " "},
            {"name": "key_ALT1", "def": "ALT", "shift": "ALT"},
            {"name": "key_CTRL2", "def": "CTRL", "shift": "CTRL"},
        ],
    ]

    def __init__(self, lang):
        super().__init__()
        self.setSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding,  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            QtWidgets.QSizePolicy.Policy.Expanding,  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        )
        self.vert_layout = QtWidgets.QVBoxLayout(self)
        self.vert_layout.setContentsMargins(0, 0, 0, 0)
        self.language = lang
        self.keys = self.keys_en if self.language == "english" else self.keys_ru

        for i in range(len(self.keys)):
            keys_layout = QtWidgets.QHBoxLayout()
            keys_layout.setSpacing(2)
            for k in self.keys[i]:
                key = KeyWidget(k['def'])
                print(key.sizePolicy().horizontalPolicy().name)
                key.setObjectName(k['name'])
                if (k['def'] in ['CTRL', 'SHIFT', 'ALT', 'CAPS', 'ENTER', 'TAB','BACKSPACE']):

                    key.setSizePolicy(
                        QtWidgets.QSizePolicy.Policy.Expanding,  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                        QtWidgets.QSizePolicy.Policy.Expanding,  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                    )
                    keys_layout.addWidget(
                        key,  stretch=2
                    )
                elif (k['def'] in [' ', ]):
                    keys_layout.addWidget(key, stretch=4)
                    key.setSizePolicy(
                        QtWidgets.QSizePolicy.Policy.Expanding,  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                        QtWidgets.QSizePolicy.Policy.Expanding,  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                    )
                # self.key_theme_switch.connect(key.on_theme_switch)
                else:
                    keys_layout.addWidget(
                        key,  stretch=1
                    )
            self.vert_layout.addLayout(
                keys_layout
            )
        # keys_layout = QtWidgets.QHBoxLayout()
        # key = KeyWidget(self.keys[4][0])
        # key.setObjectName("space")
        # self.key_theme_switch.connect(key.on_theme_switch)
        # keys_layout.addWidget(key, alignment=QtCore.Qt.AlignmentFlag.AlignCenter)
        # self.vert_layout.addLayout(keys_layout)
        # keys = self.central_widget.findChildren(KeyWidget)
        # print(len(keys))
        self.setMinimumSize(500, 300)
        # self.key_lang_change()

    def key_lang_change(self, lang):
        if lang == 'russian':
            self.keys = self.keys_ru
        else:
            self.keys = self.keys_en

        lts = self.vert_layout.findChildren(QtWidgets.QHBoxLayout)
        for i in range(len(self.keys)):
            for j in range(len(self.keys[i])):
                lts[i].itemAt(j).widget().setText(self.keys[i][j]["def"])
                lts[i].itemAt(j).widget().setObjectName(self.keys[i][j]["name"])

    def on_key_theme_switch(self):
        lts = self.findChildren(QtWidgets.QHBoxLayout)
        for i in range(len(self.keys)):
            for j in range(len(self.keys[i])):
                lts[i].itemAt(j).widget().theme_switch()

    def key_switch(self, name, isPress):
        wid = self.findChild(KeyWidget, name)
        if wid is None:
            self.findChild(KeyWidget, "key_SHIFT1").set_active(isPress)
        else:
            wid.set_active(isPress)
    def key_uncorrect(self, name):
        wid = self.findChild(KeyWidget, name)
        if wid is not None:
            wid.set_uncorrect()


class KeyProgressDisplay(QLabel):
    def __init__(self, total = 0):
        self.total = total
        self.progress = 0
        self.typos = 0
        self.er_mes = self.tr('–û—à–∏–±–æ–∫')
        super().__init__(self.get_text())

    def get_text(self):
        return f"{self.progress}/{self.total} ({self.progress / self.total:.1%})\t {self.er_mes}: {self.typos}"
    
    def reset(self, new_total = 0):
        self.total = new_total
        self.progress = 0
        self.typos = 0
        self.setText(
            f"{self.progress}/{self.total} ({self.progress / self.total:.1%})\t {self.er_mes}: {self.typos}"
        )

    @QtCore.Slot()
    def on_inc_progress(self):
        self.progress += 1
        self.setText(
            f"{self.progress}/{self.total} ({self.progress / self.total:.1%})\t {self.er_mes}: {self.typos}"
        )

    @QtCore.Slot()
    def on_typo(self):
        self.typos += 1
        self.setText(
            f"{self.progress}/{self.total} ({self.progress / self.total:.1%})\t {self.er_mes}: {self.typos}"
        )

class RadioList(QFrame):
    def __init__(self):
        super().__init__()
        self.layout = QHBoxLayout(self)
        self.layout.setSpacing(10)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        self.layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        
        self.setSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed,
            QtWidgets.QSizePolicy.Policy.Fixed,
        )
        self.button_group = QButtonGroup(self)
        self.button_group.setExclusive(True)  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–±–æ—Ä"

        # –°—Ç–∏–ª—å –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ —Å–ø–∏—Å–∫–∞
        # self.setStyleSheet(
        #     """

        # """
        # # )
        # self.setStyleSheet('background: black;')

    def add_items(self, items):
        for i, text in enumerate(items):
            btn = QRadioButton(text)
            self.button_group.addButton(btn, i)
            self.layout.addWidget(btn)

        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if items:
            self.button_group.button(0).setChecked(True)

class KeyTextEdit(QTextEdit):
    key_pressed = QtCore.Signal(str, bool)
    key_released = QtCore.Signal(str)
    textSizeChanged = QtCore.Signal(int)
    typing_start = QtCore.Signal()
    finished = QtCore.Signal()

    def __init__(self):
        super().__init__()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
        self.text = ''
        self.underline_format = QtGui.QTextCharFormat()
        self.underline_format.setUnderlineStyle(
            QtGui.QTextCharFormat.UnderlineStyle.SingleUnderline
        )
        self.underline_format.setUnderlineColor(QtGui.QColor("#9480eb"))

        self.passed_format = QtGui.QTextCharFormat()
        self.passed_format.setBackground(QtGui.QColor("#279346"))
        self.passed_format.setForeground(QtGui.QColor("#ffffff"))

        self.setReadOnly(True)

        self.setSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        # self.text_display.setFixedHeight(150)
        # self.setFixedHeight(200)
        self.setFont(QtGui.QFont("Consolas", 50, 500))
        self.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.cursorForPosition(QtCore.QPoint(0, 0))
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

        # self.setFrameStyle(
        #     QtWidgets.QFrame.Box| QtWidgets.QFrame.Plain
        # )
        # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –±–µ–∑ —Ç–µ–Ω–∏
        # self.setFrameStyle(QtWidgets.QFrame.Panel | QtWidgets.QFrame.Raised)  # –ü–∞–Ω–µ–ª—å —Å –æ–±—ä—ë–º–Ω–æ–π —Ç–µ–Ω—å—é

    # def setText(self, text):
    #     # self.document().setDefaultStyleSheet(".passed{ color: #f90000; font-size: 25px;}")

    #     self.setHtml(text)

    #     # cursor = self.textCursor()
    #     # cursor.movePosition(QtGui.QTextCursor.MoveOperation.Start)
    #     # # –í—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª
    #     # cursor.movePosition(QtGui.QTextCursor.MoveOperation.Right, QtGui.QTextCursor.MoveMode.KeepAnchor)
    #     # cursor.mergeCharFormat(self.underline_format)
    #     # cursor.movePosition(QtGui.QTextCursor.MoveOperation.Left)
    #     # self.setTextCursor(cursor)
    #     self.textSizeChanged.emit(len(text))
    #     print(self.textCursor().position(), ' position cursor')


    def adjust_position(self, original_text, position):
        escaped_part = escape(original_text[:position])
        return len(escaped_part)  # –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    
    def setHtmlText(self, text=None):
        if text is None:
            text = self.text
            original_position = self.textCursor().position()
            position = original_position # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        else:
            self.text = text
            position = 0
        
        
        passed = escape(text[:position])
        current = escape(text[position:position+1])
        remaining = escape(text[position+1:])

        # text = text[:position+1] + escape(text[position+1:])
        htmlText = f"""<span class="passed">{passed}</span><span class="remaining"><span class="current">{current}</span>{remaining}</span>"""
        self.setHtml(htmlText)
        cursor = self.textCursor()
        cursor.setPosition(position)
        self.setTextCursor(cursor)

    def get_progress(self):
        print(self.textCursor().position(), " position cursor")
        cursor = self.textCursor()
        return int(cursor.position() / len(self.toPlainText()) * 100)

    def keyName(self, event):
        if event.key() == QtCore.Qt.Key.Key_Space:
            key_name = "key_SPACE"
        elif event.key() == QtCore.Qt.Key.Key_Return:
            key_name = "key_ENTER"
        elif event.key() == QtCore.Qt.Key.Key_Alt:
            key_name = "key_ALT"
        elif event.key() == QtCore.Qt.Key.Key_Shift:
            key_name = "key_SHIFT1"
        elif event.key() == QtCore.Qt.Key.Key_Backspace:
            key_name = "key_BACKSPACE"
        elif event.key() == QtCore.Qt.Key.Key_Control:
            key_name = "key_CTRL1"
        elif event.key() == QtCore.Qt.Key.Key_CapsLock:
            key_name = "key_CAPS"
        else:
            key_name = "key_" + event.text().lower()
        return key_name

    def keyPressEvent(self, event):

        self.key_pressed.emit(self.keyName(event), event.modifiers() & Qt.KeyboardModifier.ShiftModifier)

        ch = event.text()

        print(self.textCursor().position(), " position cursor")

        return super().keyPressEvent(event) if event.key() != Qt.Key.Key_Space and event.key() != Qt.Key.Key_Shift else None

    def toNextChar(self):
        cursor = self.textCursor()
        # if cursor.position() == 0:
        #     self.typing_start.emit()

        print(cursor.position(), "pos")

        print("perfect")

        cursor.movePosition(
            QtGui.QTextCursor.MoveOperation.Right
        )
        self.setTextCursor(cursor)
        self.setHtmlText()

        cursor_rect = self.cursorRect()
        viewport_height = self.viewport().height()
        margin = cursor_rect.height()  # –ü–∏–∫—Å–µ–ª–µ–π –¥–æ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è, –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        
        if cursor_rect.bottom() > viewport_height - margin:
            scrollbar = self.verticalScrollBar()
            scrollbar.setValue(scrollbar.value() + cursor_rect.height())

    def keyReleaseEvent(self, event):
        print(type(event))
        self.key_released.emit(self.keyName(event))
        ch = event.text()

        return super().keyPressEvent(event) if event.key() != QtCore.Qt.Key.Key_Space else None

    # –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—è
    def mousePressEvent(self, e):
        pass
        # return super().mousePressEvent(e)
    def mouseDoubleClickEvent(self, e):
        pass
        # return super().mouseDoubleClickEvent(e)
    def mouseMoveEvent(self, e):
        pass
        # return super().mouseMoveEvent(e)
