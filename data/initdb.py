import json
import sqlite3
from pathlib import Path

python_keywords = set(
    [
        "False",
        "await",
        "else",
        "import",
        "pass",
        "None",
        "break",
        "except",
        "in",
        "raise",
        "True",
        "class",
        "finally",
        "is",
        "return",
        "and",
        "continue",
        "for",
        "lambda",
        "try",
        "as",
        "def",
        "from",
        "nonlocal",
        "while",
        "assert",
        "del",
        "global",
        "not",
        "with",
        "async",
        "elif",
        "if",
        "or",
        "yield",
        "match",
        "case",
        "type",
        "_",
        "module",
        "import",
        "from",
        "get",
        "set",
        "list",
        "dict",
        "main",
        "or",
        "+",
        "-",
        "*",
        "/",
        "%",
        "**",
        "//",  # Арифметические
        "=",
        "+=",
        "-=",
        "*=",
        "/=",
        "%=",
        "**=",
        "//=",  # Присваивание
        "==",
        "!=",
        ">",
        "<",
        ">=",
        "<=",  # Сравнения
        "and",
        "or",
        "not",
        "is",
        "in",
        "&",
        "|",
        "^",
        "~",
        "<<",
        ">>", 
        "(",
        ")",
        "[",
        "]",
        "{",
        "}", 
        "@",
        ",",
        ":",
        ".",
        ";",
        "...",
        "\\",
        "'",
        '"',
        "#",
        "print",
        "len",
        "range",
        "open",
        "split",
        "join",
        "format",
        "i",
        "j",
        "k",
        "x",
        "y",
        "z",
        "temp",
        "result",
        "count",
        "data",
        "print",
        "len",
        "range",
        "input",
        "type",
        "str",
        "int",
        "float",
        "list",
        "dict",
        "set",
        "tuple",
        "sorted",
        "enumerate",
        "zip",
        "map",
        "filter",
        "reduce",
        "split",
        "join",
        "strip",
        "lower",
        "upper",
        "startswith",
        "endswith",
        "replace",
        "find",
        "open",
        "read",
        "write",
        "close",
        "save",
        "sum",
        "max",
        "min",
        "abs",
        "round",
        "sqrt",
        "sin",
        "cos",
        "log",
        "calculate",
        "process_data",
        "get_value",
        "set_value",
        "is_valid",
        "check_status",
        "fetch_data",
        "parse_input",
        "generate_report",
        "x",
        "y",
        "z",
        "i",
        "j",
        "k",
        "n",
        "m",
        "index",
        "count",
        "counter",
        "idx",
        "items",
        "elements",
        "values",
        "keys",
        "results",
        "data",
        "list_data",
        "dict_data",
        "flag",
        "status",
        "is_active",
        "is_valid",
        "has_value",
        "done",
        "success",
        "temp",
        "tmp",
        "item",
        "element",
        "obj",
        "filename",
        "file_path",
        "url",
        "user_input",
        "response",
        "request",
        "config",
        "settings",
        "Object",
        "Exception",
        "Base",
        "Abstract",
        "Singleton",
        "Factory",
        "Adapter",
        "Observer",
        "Model",
        "User",
        "Product",
        "Customer",
        "Database",
        "Table",
        "Schema",
        "Window",
        "Button",
        "Label",
        "Application",
        "Request",
        "Response",
        "View",
        "Controller",
        "Router",
        "Middleware",
        "Serializer",
        "Error",
        "NotFound",
        "ValidationError",
        "__init__",
        "__str__",
        "__repr__",
        "__len__",
        "__getitem__",
        "__setitem__",
        "__iter__",
        "__next__",
        "__enter__",
        "__exit__",
        "__add__",
        "__eq__",
    ]
)


cpp_keywords = [
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "auto",
    "bitand",
    "bitor",
    "bool",
    "break",
    "case",
    "catch",
    "char",
    "char8_t",
    "char16_t",
    "char32_t",
    "class",
    "compl",
    "concept",
    "const",
    "consteval",
    "constexpr",
    "const_cast",
    "continue",
    "co_await",
    "co_return",
    "co_yield",
    "decltype",
    "default",
    "delete",
    "do",
    "double",
    "dynamic_cast",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "float",
    "for",
    "friend",
    "goto",
    "if",
    "inline",
    "int",
    "long",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "private",
    "protected",
    "public",
    "register",
    "reinterpret_cast",
    "requires",
    "return",
    "short",
    "signed",
    "sizeof",
    "static",
    "static_assert",
    "static_cast",
    "struct",
    "switch",
    "template",
    "this",
    "thread_local",
    "throw",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "unsigned",
    "using",
    "virtual",
    "void",
    "volatile",
    "wchar_t",
    "while",
    "xor",
    "xor_eq",

    
    "+", "-", "*", "/", "%",         
    "++", "--",                       # Инкремент/декремент
    "=", "+=", "-=", "*=", "/=", "%=", # Присваивание
    "==", "!=", "<", ">", "<=", ">=", # Сравнения
    "&&", "||", "!",                  # Логические
    "&", "|", "^", "~", "<<", ">>",   # Битовые
    "?:",                             # Тернарный
    "->", ".", "::",                  # Доступ
    "&", "*",                         # Указатели/ссылки
    "sizeof", "new", "delete",        # Управление памятью

    # Символы и разделители
    "(", ")", "[", "]", "{", "}",
    "<", ">", ",", ";", ":",
    "#", "\\", "'", "\"", "|", "?",

    # Популярные типы и конструкции STL
    "vector",
    "string",
    "map",
    "unordered_map",
    "set",
    "unordered_set",
    "list",
    "deque",
    "queue",
    "stack",
    "pair",
    "tuple",
    "optional",
    "variant",
    "any",
    "function",
    "shared_ptr",
    "unique_ptr",
    "weak_ptr",
    "make_shared",
    "make_unique",
    "move",
    "forward",
    "emplace",
    "push_back",
    "push_front",
    "insert",
    "erase",
    "begin",
    "end",
    "rbegin",
    "rend",
    "size",
    "empty",
    "clear",
    "find",
    "count",
    "sort",
    "reverse",
    "max_element",
    "min_element",
    "accumulate",
    "iota",
    "copy",
    "fill",
    "transform",
    "for_each",
    "lambda",
    "auto",

    # Популярные названия переменных
    "i", "j", "k", "n", "m",
    "x", "y", "z",
    "a", "b", "c",
    "index", "count", "counter",
    "idx", "pos", "size", "length",
    "value", "result", "temp", "tmp",
    "data", "arr", "vec", "str",
    "ptr", "ref", "obj",
    "flag", "is_valid", "is_open",
    "found", "success", "done",
    "first", "second", "third",
    "begin", "end", "middle",
    "input", "output", "file",
    "config", "settings", "params",

    # Популярные названия функций
    "main",
    "print",
    "read",
    "write",
    "open",
    "close",
    "save",
    "load",
    "create",
    "destroy",
    "init",
    "clear",
    "reset",
    "update",
    "render",
    "draw",
    "process",
    "handle",
    "calculate",
    "compute",
    "sum",
    "average",
    "max",
    "min",
    "sort",
    "search",
    "find",
    "get",
    "set",
    "add",
    "remove",
    "insert",
    "delete",
    "begin",
    "end",
    "size",
    "empty",
    "clear",
    "push",
    "pop",
    "front",
    "back",
    "make",
    "create",
    "parse",
    "generate",
    "validate",
    "check",
    "is_valid",
    "has_value",
    "to_string",
    "from_string",

    # Классы и паттерны
    "Object",
    "Base",
    "Derived",
    "Abstract",
    "Interface",
    "Singleton",
    "Factory",
    "Builder",
    "Adapter",
    "Observer",
    "Strategy",
    "Iterator",
    "Container",
    "Node",
    "Tree",
    "Graph",
    "Point",
    "Rect",
    "Circle",
    "Shape",
    "Color",
    "Image",
    "Window",
    "Button",
    "Label",
    "Widget",
    "Application",
    "Database",
    "Connection",
    "Transaction",
    "Query",
    "Result",
    "Request",
    "Response",
    "Server",
    "Client",
    "Socket",
    "Buffer",
    "Stream",
    "Parser",
    "Lexer",
    "Tokenizer",
    "Compiler",
    "VM",
    "Thread",
    "Mutex",
    "Lock",
    "Condition",
    "Future",
    "Promise",
    "Async",
    "Await",

    # Специальные методы и макросы
    "operator=",
    "operator+",
    "operator-",
    "operator*",
    "operator/",
    "operator==",
    "operator!=",
    "operator<",
    "operator>",
    "operator<<",
    "operator>>",
    "operator()",
    "operator[]",
    "operator->",
    "operator*",
    "operator&",
    "operator|",
    "operator^",
    "operator~",
    "operator!",
    "operator++",
    "operator--",
    "operator+=",
    "operator-=",
    "operator*=",
    "operator/=",
    "operator%=",
    "operator<<=",
    "operator>>=",
    "operator&=",
    "operator|=",
    "operator^=",
    "operator&&",
    "operator||",
    "operator<=>",
    "operator new",
    "operator delete",
    "operator\"\"",
    "main",
    "override",
    "final",
    "noexcept",
    "constexpr",
    "consteval",
    "decltype",
    "auto",
    "typedef",
    "typename",
    "template",
    "requires",
    "concept",
    "sizeof",
    "alignof",
    "typeid",
    "dynamic_cast",
    "static_cast",
    "reinterpret_cast",
    "const_cast",
    "nullptr",
    "this",
    "__FILE__",
    "__LINE__",
    "__func__",
    "__DATE__",
    "__TIME__",
    "__cplusplus"
]

python_keywords = list(python_keywords)

# data = [("python", word) for word in python_keywords]

# conn = sqlite3.connect(r"C:\PythonProjects\pyKey\data\data.db")

# cursor = conn.cursor()
# query = 'INSERT INTO words (language, word) VALUES(?, ?)'
# cursor.executemany(query, data)
# conn.commit()
# conn.close()

# print(len(python_keywords))


data = [("cpp", word) for word in cpp_keywords]
conn = sqlite3.connect(r"C:\PythonProjects\pyKey\data\data.db")
cursor = conn.cursor()
query = 'INSERT INTO words (language, word) VALUES(?, ?)'
cursor.executemany(query, data)
conn.commit()
conn.close()

print(len(cpp_keywords))

def load_json_to_sqlite(json_path: str, db_path: str = "app.db"):
    # 1. Загрузка JSON
    with open(json_path, "r", encoding="utf-8") as f:
        texts = json.load(f)["texts"]

    # 2. Подключение к SQLite (если БД нет — она создастся)
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # 3. Создание таблицы (если её нет)
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS texts (
            id INTEGER PRIMARY KEY,
            language TEXT NOT NULL,
            difficulty TEXT NOT NULL,
            length INTEGER NOT NULL,
            content TEXT NOT NULL
        )
    """
    )

    # 4. Вставка данных
    for text in texts:
        cursor.execute(
            """
            INSERT INTO texts (id, language, difficulty, length, content)
            VALUES (?, ?, ?, ?, ?)
        """,
            (
                text["id"],
                text["language"],
                text["difficulty"],
                text["length"],
                text["content"],
            ),
        )

    # 5. Сохранение и закрытие
    conn.commit()
    conn.close()

    # Пример вызова
    # load_json_to_sqlite("data/texts.json", r"C:\Users\User\Desktop\sqlite\data.db")

# with open("data/words.json", "r", encoding="utf-8") as f:
#     words = json.load(f)["languages"]

# conn = sqlite3.connect(r"C:\Users\User\Desktop\sqlite\data.db")
# cursor = conn.cursor()

# cursor.execute(
#     """
# CREATE TABLE IF NOT EXISTS words (
#     id INTEGER PRIMARY KEY,
#     language TEXT NOT NULL,
#     word TEXT NOT NULL
# );

# """
# )
# cursor.execute("CREATE INDEX IF NOT EXISTS idx_language ON words(language);")

# cursor.execute('''
# INSERT INTO words (language, word)
# SELECT language, word
# FROM w
# ORDER BY language, word  -- Сортировка по цене (убывание) и имени (возрастание)
# ''')

# # for lang, word_list in words.items():
# #     for word in word_list:
# #         cursor.execute(
# #             "INSERT INTO words (word, language) VALUES (?, ?)",
# #             (word, lang)
# #         )


# conn.commit()
# conn.close()
